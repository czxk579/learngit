1.Git是目前世界上最先进的分布式版本控制系统（没有之一）;
远程库的名字默认就是origin
HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

2.版本回退(重点)
1)HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
使用命令git reset --hard commit_id。
2)穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3)要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本,查看版本的commit_id。
4)Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，
上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
如：返回上一个版本：
$ git reset --hard HEAD^


3.工作区和暂存区
工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
小结：
工作区：就是我们的版本所放的目录
版本库：隐藏的.git文件夹，包括暂存区stage(或者叫index)、HEAD指针和默认的master分支。

4.撤销修改(重点)
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，
不过前提是没有推送到远程库。
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

5.删除文件
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
$ rm test.txt
Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
$ git rm test.txt	或者 	git add test.txt
$ git commit -m "remove test.txt"
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。



6.关联远程库
1.创建SSH Key：
ssh-keygen -t rsa -C "842930917@qq.com"
将公钥拷贝黏贴至gitHub上

2.要关联一个远程库，使用命令：
git remote add origin git@server-name:path/repo-name.git；
git remote add origin git@github.com:czxk579/learngit.git
git remote add origin git@github.com:用户名/仓库名.git

3.关联后，使用命令：
git push -u origin master
第一次推送master分支的所有内容；由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令。此后，每次本地提交后，只要有必要，就可以使用命令：
git push origin master
推送最新修改；

4.分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，
而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

7.从远程库克隆
1)首先，登陆GitHub，创建一个新的仓库，名字叫gitskills:

2）使用命令git clone克隆一个本地库：
git clone git@github.com:czxk579/gitskills.git

8.创建与合并分支
1)查看分支：git branch
git branch命令会列出所有分支，当前分支前面会标一个*号。

2)创建dev分支并切换到dev分支：
git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
创建分支：git branch <name>
切换分支：git checkout <name>

3)创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


9.分支管理策略
1)首先，仍然创建并切换dev分支:
$ git checkout -b dev

2)修改readme.txt文件，并提交一个新的commit:
$ git add readme.txt 
$ git commit -m "add merge"

3)换回master:
$ git checkout master

4)准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward:
$ git merge --no-ff -m "merge with no-ff" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并后，我们用git log看看分支历史：
$ git log --graph --pretty=oneline --abbrev-commit
*   e1e9c68 (HEAD -> master) merge with no-ff
|\  
| * f52c633 (dev) add merge
|/  
*   cf810e4 conflict fixed
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

10.Bug分支
1)修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，
但是，当前正在dev上进行的工作还没有提交
$ git status
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。
但是，必须在两个小时内修复该bug，怎么办？
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作:
$ git stash
现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），
因此可以放心地创建分支来修复bug
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
$ git checkout master
$ git checkout -b issue-101
修改bug后提交:
$ git add readme.txt 
$ git commit -m "fix bug 101"
切换到master分支，并完成合并，最后删除issue-101分支:
$ git checkout master
$ git merge --no-ff -m "merged bug fix 101" issue-101
接着回到dev分支干活了:
$ git checkout dev
$ git status
工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看
恢复现场，有两个办法:
1.用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
2.用git stash pop，恢复的同时把stash内容也删了

2)当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，
再git stash pop，回到工作现场。

11.多人协作
多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令：
git branch --set-upstream-to <branch-name> origin/<branch-name>
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
小结
1)查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
2)从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
3)在本地创建并关联远程分支，使用
git checkout -b branch-name origin/branch-name，
eg:
git checkout -b dev origin/dev
本地和远程分支的名称最好一致；
4)建立本地分支和远程分支的关联，使用:
git branch --set-upstream branch-name origin/branch-name；
eg:
git branch --set-upstream-to=origin/dev dev				???
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

12.创建标签
1)命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
2)命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
3)命令git tag可以查看所有标签。
warning:标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，
那么在这两个分支上都可以看到这个标签。 

13.操作标签
1)命令git push origin <tagname>可以推送一个本地标签；
2)命令git push origin --tags可以推送全部未推送过的本地标签；
3)命令git tag -d <tagname>可以删除一个本地标签；
4)命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

edit by feat5
